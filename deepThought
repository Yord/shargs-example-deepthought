#!/usr/bin/env node

const {parser} = require('shargs')
const {command, flag, number, string, stringPos} = require('shargs-opts')
const {cast, flagsAsBools, requireOptions, restrictToOnly, reverseFlags, splitShortOptions, verifyRules} = require('shargs-parser')
const {note, optsDef, optsLists, space, synopses, synopsis, usage} = require('shargs-usage')

const rules = html => opts => (
  typeof html.values === 'undefined' ||
  opts.some(_ => _.key === 'format' && (typeof _.values === 'undefined' || _.values[0] === 'json'))
)

const askOpts = [
  string('format', ['--format'], {only: ['json', 'xml'], defaultValues: ['json'], desc: 'Respond either with json or xml.'}),
  flag('html', ['--no-html'], {reverse: true, rules, desc: 'Removes HTML tags.'}),
  flag('help', ['-h', '--help'], {desc: 'Print this help message and exit.'}),
  stringPos('question', {required: true, desc: 'State your question.'})
]

const opts = [
  command(askOpts)('ask', ['ask'], {required: true, desc: 'Ask a question.'}),
  number('answer', ['-a', '--answer'], {defaultValues: [42], desc: 'The answer.'}),
  flag('help', ['-h', '--help'], {desc: 'Print this help message and exit.'})
]

const checks = {
  opts: [requireOptions]
}

const askChecks = {
  opts: [verifyRules]
}

const stages = {
  argv: [splitShortOptions],
  opts: [reverseFlags, restrictToOnly, cast],
  args: [flagsAsBools]
}

const description = note(
  'Deep Thought was created to come up with the Answer to ' +
  'The Ultimate Question of Life, the Universe, and Everything.'
)

const docs = usage([
  synopses('deepThought'),
  space,
  optsLists,
  space,
  description
])

const askDocs = usage([
  synopsis('deepThought ask'),
  space,
  optsDef,
  space,
  description
])

const style = {
  line: {width: 80},
  desc: {padStart: 4, width: 76},
  cols: [{width: 25}, {width: 55}]
}

const argv = process.argv.slice(2)

const ask = parser(stages, {checks: askChecks})
const deepThought = parser(stages, {checks, parsers: {ask}})(opts)
const {args, errs} = deepThought(argv)

if (args.help) {
  const help = docs(opts)(style)
  console.log(help)
  process.exit(0)
}

if (args.ask && args.ask.help) {
  const askHelp = askDocs(askOpts)(style)
  console.log(askHelp)
  process.exit(0)
}

if (errs.length > 0) {
  errs.forEach(({code, msg}) => console.log(`${code}: ${msg}`))
  process.exit(1)
}

console.log(`The answer is: ${args.answer}`)
console.log(JSON.stringify(args, null, 2))
process.exit(0)